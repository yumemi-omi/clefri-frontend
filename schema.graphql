schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "box"
"""
type box {
  box_id: uuid!
  box_name: String!
  created_at: timestamptz!
  created_by: String!

  """An array relationship"""
  foodstuffs(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): [foodstuff!]!

  """An aggregate relationship"""
  foodstuffs_aggregate(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): foodstuff_aggregate!

  """An object relationship"""
  space: space!
  space_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "box"
"""
type box_aggregate {
  aggregate: box_aggregate_fields
  nodes: [box!]!
}

"""
aggregate fields of "box"
"""
type box_aggregate_fields {
  count(columns: [box_select_column!], distinct: Boolean): Int!
  max: box_max_fields
  min: box_min_fields
}

"""
order by aggregate values of table "box"
"""
input box_aggregate_order_by {
  count: order_by
  max: box_max_order_by
  min: box_min_order_by
}

"""
input type for inserting array relation for remote table "box"
"""
input box_arr_rel_insert_input {
  data: [box_insert_input!]!

  """on conflict condition"""
  on_conflict: box_on_conflict
}

"""
Boolean expression to filter rows from the table "box". All fields are combined with a logical 'AND'.
"""
input box_bool_exp {
  _and: [box_bool_exp!]
  _not: box_bool_exp
  _or: [box_bool_exp!]
  box_id: uuid_comparison_exp
  box_name: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  foodstuffs: foodstuff_bool_exp
  space: space_bool_exp
  space_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""
unique or primary key constraints on table "box"
"""
enum box_constraint {
  """unique or primary key constraint"""
  boxes_pkey
}

"""
input type for inserting data into table "box"
"""
input box_insert_input {
  box_id: uuid
  box_name: String
  created_at: timestamptz
  created_by: String
  foodstuffs: foodstuff_arr_rel_insert_input
  space: space_obj_rel_insert_input
  space_id: uuid
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type box_max_fields {
  box_id: uuid
  box_name: String
  created_at: timestamptz
  created_by: String
  space_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "box"
"""
input box_max_order_by {
  box_id: order_by
  box_name: order_by
  created_at: order_by
  created_by: order_by
  space_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type box_min_fields {
  box_id: uuid
  box_name: String
  created_at: timestamptz
  created_by: String
  space_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "box"
"""
input box_min_order_by {
  box_id: order_by
  box_name: order_by
  created_at: order_by
  created_by: order_by
  space_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "box"
"""
type box_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [box!]!
}

"""
input type for inserting object relation for remote table "box"
"""
input box_obj_rel_insert_input {
  data: box_insert_input!

  """on conflict condition"""
  on_conflict: box_on_conflict
}

"""
on conflict condition type for table "box"
"""
input box_on_conflict {
  constraint: box_constraint!
  update_columns: [box_update_column!]! = []
  where: box_bool_exp
}

"""Ordering options when selecting data from "box"."""
input box_order_by {
  box_id: order_by
  box_name: order_by
  created_at: order_by
  created_by: order_by
  foodstuffs_aggregate: foodstuff_aggregate_order_by
  space: space_order_by
  space_id: order_by
  updated_at: order_by
  user: user_order_by
}

"""primary key columns input for table: box"""
input box_pk_columns_input {
  box_id: uuid!
}

"""
select columns of table "box"
"""
enum box_select_column {
  """column name"""
  box_id

  """column name"""
  box_name

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  space_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "box"
"""
input box_set_input {
  box_id: uuid
  box_name: String
  created_at: timestamptz
  created_by: String
  space_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "box"
"""
enum box_update_column {
  """column name"""
  box_id

  """column name"""
  box_name

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  space_id

  """column name"""
  updated_at
}

"""
columns and relationships of "foodstuff"
"""
type foodstuff {
  """An object relationship"""
  box: box!
  box_id: uuid!
  created_at: timestamptz!
  created_by: String!
  foodstuff_id: uuid!
  foodstuff_name: String
  quantity: Int!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "foodstuff"
"""
type foodstuff_aggregate {
  aggregate: foodstuff_aggregate_fields
  nodes: [foodstuff!]!
}

"""
aggregate fields of "foodstuff"
"""
type foodstuff_aggregate_fields {
  avg: foodstuff_avg_fields
  count(columns: [foodstuff_select_column!], distinct: Boolean): Int!
  max: foodstuff_max_fields
  min: foodstuff_min_fields
  stddev: foodstuff_stddev_fields
  stddev_pop: foodstuff_stddev_pop_fields
  stddev_samp: foodstuff_stddev_samp_fields
  sum: foodstuff_sum_fields
  var_pop: foodstuff_var_pop_fields
  var_samp: foodstuff_var_samp_fields
  variance: foodstuff_variance_fields
}

"""
order by aggregate values of table "foodstuff"
"""
input foodstuff_aggregate_order_by {
  avg: foodstuff_avg_order_by
  count: order_by
  max: foodstuff_max_order_by
  min: foodstuff_min_order_by
  stddev: foodstuff_stddev_order_by
  stddev_pop: foodstuff_stddev_pop_order_by
  stddev_samp: foodstuff_stddev_samp_order_by
  sum: foodstuff_sum_order_by
  var_pop: foodstuff_var_pop_order_by
  var_samp: foodstuff_var_samp_order_by
  variance: foodstuff_variance_order_by
}

"""
input type for inserting array relation for remote table "foodstuff"
"""
input foodstuff_arr_rel_insert_input {
  data: [foodstuff_insert_input!]!

  """on conflict condition"""
  on_conflict: foodstuff_on_conflict
}

"""aggregate avg on columns"""
type foodstuff_avg_fields {
  quantity: Float
}

"""
order by avg() on columns of table "foodstuff"
"""
input foodstuff_avg_order_by {
  quantity: order_by
}

"""
Boolean expression to filter rows from the table "foodstuff". All fields are combined with a logical 'AND'.
"""
input foodstuff_bool_exp {
  _and: [foodstuff_bool_exp!]
  _not: foodstuff_bool_exp
  _or: [foodstuff_bool_exp!]
  box: box_bool_exp
  box_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  foodstuff_id: uuid_comparison_exp
  foodstuff_name: String_comparison_exp
  quantity: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""
unique or primary key constraints on table "foodstuff"
"""
enum foodstuff_constraint {
  """unique or primary key constraint"""
  foodstuffs_pkey
}

"""
input type for incrementing numeric columns in table "foodstuff"
"""
input foodstuff_inc_input {
  quantity: Int
}

"""
input type for inserting data into table "foodstuff"
"""
input foodstuff_insert_input {
  box: box_obj_rel_insert_input
  box_id: uuid
  created_at: timestamptz
  created_by: String
  foodstuff_id: uuid
  foodstuff_name: String
  quantity: Int
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type foodstuff_max_fields {
  box_id: uuid
  created_at: timestamptz
  created_by: String
  foodstuff_id: uuid
  foodstuff_name: String
  quantity: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "foodstuff"
"""
input foodstuff_max_order_by {
  box_id: order_by
  created_at: order_by
  created_by: order_by
  foodstuff_id: order_by
  foodstuff_name: order_by
  quantity: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type foodstuff_min_fields {
  box_id: uuid
  created_at: timestamptz
  created_by: String
  foodstuff_id: uuid
  foodstuff_name: String
  quantity: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "foodstuff"
"""
input foodstuff_min_order_by {
  box_id: order_by
  created_at: order_by
  created_by: order_by
  foodstuff_id: order_by
  foodstuff_name: order_by
  quantity: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "foodstuff"
"""
type foodstuff_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [foodstuff!]!
}

"""
on conflict condition type for table "foodstuff"
"""
input foodstuff_on_conflict {
  constraint: foodstuff_constraint!
  update_columns: [foodstuff_update_column!]! = []
  where: foodstuff_bool_exp
}

"""Ordering options when selecting data from "foodstuff"."""
input foodstuff_order_by {
  box: box_order_by
  box_id: order_by
  created_at: order_by
  created_by: order_by
  foodstuff_id: order_by
  foodstuff_name: order_by
  quantity: order_by
  updated_at: order_by
  user: user_order_by
}

"""primary key columns input for table: foodstuff"""
input foodstuff_pk_columns_input {
  foodstuff_id: uuid!
}

"""
select columns of table "foodstuff"
"""
enum foodstuff_select_column {
  """column name"""
  box_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  foodstuff_id

  """column name"""
  foodstuff_name

  """column name"""
  quantity

  """column name"""
  updated_at
}

"""
input type for updating data in table "foodstuff"
"""
input foodstuff_set_input {
  box_id: uuid
  created_at: timestamptz
  created_by: String
  foodstuff_id: uuid
  foodstuff_name: String
  quantity: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type foodstuff_stddev_fields {
  quantity: Float
}

"""
order by stddev() on columns of table "foodstuff"
"""
input foodstuff_stddev_order_by {
  quantity: order_by
}

"""aggregate stddev_pop on columns"""
type foodstuff_stddev_pop_fields {
  quantity: Float
}

"""
order by stddev_pop() on columns of table "foodstuff"
"""
input foodstuff_stddev_pop_order_by {
  quantity: order_by
}

"""aggregate stddev_samp on columns"""
type foodstuff_stddev_samp_fields {
  quantity: Float
}

"""
order by stddev_samp() on columns of table "foodstuff"
"""
input foodstuff_stddev_samp_order_by {
  quantity: order_by
}

"""aggregate sum on columns"""
type foodstuff_sum_fields {
  quantity: Int
}

"""
order by sum() on columns of table "foodstuff"
"""
input foodstuff_sum_order_by {
  quantity: order_by
}

"""
update columns of table "foodstuff"
"""
enum foodstuff_update_column {
  """column name"""
  box_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  foodstuff_id

  """column name"""
  foodstuff_name

  """column name"""
  quantity

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type foodstuff_var_pop_fields {
  quantity: Float
}

"""
order by var_pop() on columns of table "foodstuff"
"""
input foodstuff_var_pop_order_by {
  quantity: order_by
}

"""aggregate var_samp on columns"""
type foodstuff_var_samp_fields {
  quantity: Float
}

"""
order by var_samp() on columns of table "foodstuff"
"""
input foodstuff_var_samp_order_by {
  quantity: order_by
}

"""aggregate variance on columns"""
type foodstuff_variance_fields {
  quantity: Float
}

"""
order by variance() on columns of table "foodstuff"
"""
input foodstuff_variance_order_by {
  quantity: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "mst_category"
"""
type mst_category {
  created_at: timestamptz!
  id: uuid!
  mst_category_id: uuid!
  mst_category_name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mst_category"
"""
type mst_category_aggregate {
  aggregate: mst_category_aggregate_fields
  nodes: [mst_category!]!
}

"""
aggregate fields of "mst_category"
"""
type mst_category_aggregate_fields {
  count(columns: [mst_category_select_column!], distinct: Boolean): Int!
  max: mst_category_max_fields
  min: mst_category_min_fields
}

"""
Boolean expression to filter rows from the table "mst_category". All fields are combined with a logical 'AND'.
"""
input mst_category_bool_exp {
  _and: [mst_category_bool_exp!]
  _not: mst_category_bool_exp
  _or: [mst_category_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mst_category_id: uuid_comparison_exp
  mst_category_name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mst_category"
"""
enum mst_category_constraint {
  """unique or primary key constraint"""
  categories_pkey

  """unique or primary key constraint"""
  mst_category_id_key
}

"""
input type for inserting data into table "mst_category"
"""
input mst_category_insert_input {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_category_name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mst_category_max_fields {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_category_name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mst_category_min_fields {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_category_name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mst_category"
"""
type mst_category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mst_category!]!
}

"""
on conflict condition type for table "mst_category"
"""
input mst_category_on_conflict {
  constraint: mst_category_constraint!
  update_columns: [mst_category_update_column!]! = []
  where: mst_category_bool_exp
}

"""Ordering options when selecting data from "mst_category"."""
input mst_category_order_by {
  created_at: order_by
  id: order_by
  mst_category_id: order_by
  mst_category_name: order_by
  updated_at: order_by
}

"""primary key columns input for table: mst_category"""
input mst_category_pk_columns_input {
  mst_category_id: uuid!
}

"""
select columns of table "mst_category"
"""
enum mst_category_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mst_category_id

  """column name"""
  mst_category_name

  """column name"""
  updated_at
}

"""
input type for updating data in table "mst_category"
"""
input mst_category_set_input {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_category_name: String
  updated_at: timestamptz
}

"""
update columns of table "mst_category"
"""
enum mst_category_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mst_category_id

  """column name"""
  mst_category_name

  """column name"""
  updated_at
}

"""
columns and relationships of "mst_foodstuff"
"""
type mst_foodstuff {
  created_at: timestamptz!
  id: uuid!
  mst_category_id: uuid!
  mst_foodstuff_id: uuid!
  mst_foodstuff_name: String!
  mst_picture_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "mst_foodstuff"
"""
type mst_foodstuff_aggregate {
  aggregate: mst_foodstuff_aggregate_fields
  nodes: [mst_foodstuff!]!
}

"""
aggregate fields of "mst_foodstuff"
"""
type mst_foodstuff_aggregate_fields {
  count(columns: [mst_foodstuff_select_column!], distinct: Boolean): Int!
  max: mst_foodstuff_max_fields
  min: mst_foodstuff_min_fields
}

"""
Boolean expression to filter rows from the table "mst_foodstuff". All fields are combined with a logical 'AND'.
"""
input mst_foodstuff_bool_exp {
  _and: [mst_foodstuff_bool_exp!]
  _not: mst_foodstuff_bool_exp
  _or: [mst_foodstuff_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mst_category_id: uuid_comparison_exp
  mst_foodstuff_id: uuid_comparison_exp
  mst_foodstuff_name: String_comparison_exp
  mst_picture_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mst_foodstuff"
"""
enum mst_foodstuff_constraint {
  """unique or primary key constraint"""
  mst_foodstuff_id_key

  """unique or primary key constraint"""
  mst_foodstuffs_pkey
}

"""
input type for inserting data into table "mst_foodstuff"
"""
input mst_foodstuff_insert_input {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_foodstuff_id: uuid
  mst_foodstuff_name: String
  mst_picture_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mst_foodstuff_max_fields {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_foodstuff_id: uuid
  mst_foodstuff_name: String
  mst_picture_id: uuid
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mst_foodstuff_min_fields {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_foodstuff_id: uuid
  mst_foodstuff_name: String
  mst_picture_id: uuid
  updated_at: timestamptz
}

"""
response of any mutation on the table "mst_foodstuff"
"""
type mst_foodstuff_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mst_foodstuff!]!
}

"""
on conflict condition type for table "mst_foodstuff"
"""
input mst_foodstuff_on_conflict {
  constraint: mst_foodstuff_constraint!
  update_columns: [mst_foodstuff_update_column!]! = []
  where: mst_foodstuff_bool_exp
}

"""Ordering options when selecting data from "mst_foodstuff"."""
input mst_foodstuff_order_by {
  created_at: order_by
  id: order_by
  mst_category_id: order_by
  mst_foodstuff_id: order_by
  mst_foodstuff_name: order_by
  mst_picture_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: mst_foodstuff"""
input mst_foodstuff_pk_columns_input {
  mst_foodstuff_id: uuid!
}

"""
select columns of table "mst_foodstuff"
"""
enum mst_foodstuff_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mst_category_id

  """column name"""
  mst_foodstuff_id

  """column name"""
  mst_foodstuff_name

  """column name"""
  mst_picture_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "mst_foodstuff"
"""
input mst_foodstuff_set_input {
  created_at: timestamptz
  id: uuid
  mst_category_id: uuid
  mst_foodstuff_id: uuid
  mst_foodstuff_name: String
  mst_picture_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "mst_foodstuff"
"""
enum mst_foodstuff_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mst_category_id

  """column name"""
  mst_foodstuff_id

  """column name"""
  mst_foodstuff_name

  """column name"""
  mst_picture_id

  """column name"""
  updated_at
}

"""
columns and relationships of "mst_picture"
"""
type mst_picture {
  created_at: timestamptz!
  id: uuid!
  mst_picture_id: uuid!
  mst_picture_url: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "mst_picture"
"""
type mst_picture_aggregate {
  aggregate: mst_picture_aggregate_fields
  nodes: [mst_picture!]!
}

"""
aggregate fields of "mst_picture"
"""
type mst_picture_aggregate_fields {
  count(columns: [mst_picture_select_column!], distinct: Boolean): Int!
  max: mst_picture_max_fields
  min: mst_picture_min_fields
}

"""
Boolean expression to filter rows from the table "mst_picture". All fields are combined with a logical 'AND'.
"""
input mst_picture_bool_exp {
  _and: [mst_picture_bool_exp!]
  _not: mst_picture_bool_exp
  _or: [mst_picture_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mst_picture_id: uuid_comparison_exp
  mst_picture_url: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "mst_picture"
"""
enum mst_picture_constraint {
  """unique or primary key constraint"""
  mst_picture_id_key

  """unique or primary key constraint"""
  pictures_pkey
}

"""
input type for inserting data into table "mst_picture"
"""
input mst_picture_insert_input {
  created_at: timestamptz
  id: uuid
  mst_picture_id: uuid
  mst_picture_url: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type mst_picture_max_fields {
  created_at: timestamptz
  id: uuid
  mst_picture_id: uuid
  mst_picture_url: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type mst_picture_min_fields {
  created_at: timestamptz
  id: uuid
  mst_picture_id: uuid
  mst_picture_url: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "mst_picture"
"""
type mst_picture_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mst_picture!]!
}

"""
on conflict condition type for table "mst_picture"
"""
input mst_picture_on_conflict {
  constraint: mst_picture_constraint!
  update_columns: [mst_picture_update_column!]! = []
  where: mst_picture_bool_exp
}

"""Ordering options when selecting data from "mst_picture"."""
input mst_picture_order_by {
  created_at: order_by
  id: order_by
  mst_picture_id: order_by
  mst_picture_url: order_by
  updated_at: order_by
}

"""primary key columns input for table: mst_picture"""
input mst_picture_pk_columns_input {
  mst_picture_id: uuid!
}

"""
select columns of table "mst_picture"
"""
enum mst_picture_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mst_picture_id

  """column name"""
  mst_picture_url

  """column name"""
  updated_at
}

"""
input type for updating data in table "mst_picture"
"""
input mst_picture_set_input {
  created_at: timestamptz
  id: uuid
  mst_picture_id: uuid
  mst_picture_url: String
  updated_at: timestamptz
}

"""
update columns of table "mst_picture"
"""
enum mst_picture_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  mst_picture_id

  """column name"""
  mst_picture_url

  """column name"""
  updated_at
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "box"
  """
  delete_box(
    """filter the rows which have to be deleted"""
    where: box_bool_exp!
  ): box_mutation_response

  """
  delete single row from the table: "box"
  """
  delete_box_by_pk(box_id: uuid!): box

  """
  delete data from the table: "foodstuff"
  """
  delete_foodstuff(
    """filter the rows which have to be deleted"""
    where: foodstuff_bool_exp!
  ): foodstuff_mutation_response

  """
  delete single row from the table: "foodstuff"
  """
  delete_foodstuff_by_pk(foodstuff_id: uuid!): foodstuff

  """
  delete data from the table: "mst_category"
  """
  delete_mst_category(
    """filter the rows which have to be deleted"""
    where: mst_category_bool_exp!
  ): mst_category_mutation_response

  """
  delete single row from the table: "mst_category"
  """
  delete_mst_category_by_pk(mst_category_id: uuid!): mst_category

  """
  delete data from the table: "mst_foodstuff"
  """
  delete_mst_foodstuff(
    """filter the rows which have to be deleted"""
    where: mst_foodstuff_bool_exp!
  ): mst_foodstuff_mutation_response

  """
  delete single row from the table: "mst_foodstuff"
  """
  delete_mst_foodstuff_by_pk(mst_foodstuff_id: uuid!): mst_foodstuff

  """
  delete data from the table: "mst_picture"
  """
  delete_mst_picture(
    """filter the rows which have to be deleted"""
    where: mst_picture_bool_exp!
  ): mst_picture_mutation_response

  """
  delete single row from the table: "mst_picture"
  """
  delete_mst_picture_by_pk(mst_picture_id: uuid!): mst_picture

  """
  delete data from the table: "space"
  """
  delete_space(
    """filter the rows which have to be deleted"""
    where: space_bool_exp!
  ): space_mutation_response

  """
  delete single row from the table: "space"
  """
  delete_space_by_pk(space_id: uuid!): space

  """
  delete data from the table: "space_owner"
  """
  delete_space_owner(
    """filter the rows which have to be deleted"""
    where: space_owner_bool_exp!
  ): space_owner_mutation_response

  """
  delete single row from the table: "space_owner"
  """
  delete_space_owner_by_pk(space_owner_id: uuid!): space_owner

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(user_id: String!): user

  """
  delete data from the table: "user_status"
  """
  delete_user_status(
    """filter the rows which have to be deleted"""
    where: user_status_bool_exp!
  ): user_status_mutation_response

  """
  delete single row from the table: "user_status"
  """
  delete_user_status_by_pk(user_status_id: uuid!): user_status

  """
  insert data into the table: "box"
  """
  insert_box(
    """the rows to be inserted"""
    objects: [box_insert_input!]!

    """on conflict condition"""
    on_conflict: box_on_conflict
  ): box_mutation_response

  """
  insert a single row into the table: "box"
  """
  insert_box_one(
    """the row to be inserted"""
    object: box_insert_input!

    """on conflict condition"""
    on_conflict: box_on_conflict
  ): box

  """
  insert data into the table: "foodstuff"
  """
  insert_foodstuff(
    """the rows to be inserted"""
    objects: [foodstuff_insert_input!]!

    """on conflict condition"""
    on_conflict: foodstuff_on_conflict
  ): foodstuff_mutation_response

  """
  insert a single row into the table: "foodstuff"
  """
  insert_foodstuff_one(
    """the row to be inserted"""
    object: foodstuff_insert_input!

    """on conflict condition"""
    on_conflict: foodstuff_on_conflict
  ): foodstuff

  """
  insert data into the table: "mst_category"
  """
  insert_mst_category(
    """the rows to be inserted"""
    objects: [mst_category_insert_input!]!

    """on conflict condition"""
    on_conflict: mst_category_on_conflict
  ): mst_category_mutation_response

  """
  insert a single row into the table: "mst_category"
  """
  insert_mst_category_one(
    """the row to be inserted"""
    object: mst_category_insert_input!

    """on conflict condition"""
    on_conflict: mst_category_on_conflict
  ): mst_category

  """
  insert data into the table: "mst_foodstuff"
  """
  insert_mst_foodstuff(
    """the rows to be inserted"""
    objects: [mst_foodstuff_insert_input!]!

    """on conflict condition"""
    on_conflict: mst_foodstuff_on_conflict
  ): mst_foodstuff_mutation_response

  """
  insert a single row into the table: "mst_foodstuff"
  """
  insert_mst_foodstuff_one(
    """the row to be inserted"""
    object: mst_foodstuff_insert_input!

    """on conflict condition"""
    on_conflict: mst_foodstuff_on_conflict
  ): mst_foodstuff

  """
  insert data into the table: "mst_picture"
  """
  insert_mst_picture(
    """the rows to be inserted"""
    objects: [mst_picture_insert_input!]!

    """on conflict condition"""
    on_conflict: mst_picture_on_conflict
  ): mst_picture_mutation_response

  """
  insert a single row into the table: "mst_picture"
  """
  insert_mst_picture_one(
    """the row to be inserted"""
    object: mst_picture_insert_input!

    """on conflict condition"""
    on_conflict: mst_picture_on_conflict
  ): mst_picture

  """
  insert data into the table: "space"
  """
  insert_space(
    """the rows to be inserted"""
    objects: [space_insert_input!]!

    """on conflict condition"""
    on_conflict: space_on_conflict
  ): space_mutation_response

  """
  insert a single row into the table: "space"
  """
  insert_space_one(
    """the row to be inserted"""
    object: space_insert_input!

    """on conflict condition"""
    on_conflict: space_on_conflict
  ): space

  """
  insert data into the table: "space_owner"
  """
  insert_space_owner(
    """the rows to be inserted"""
    objects: [space_owner_insert_input!]!

    """on conflict condition"""
    on_conflict: space_owner_on_conflict
  ): space_owner_mutation_response

  """
  insert a single row into the table: "space_owner"
  """
  insert_space_owner_one(
    """the row to be inserted"""
    object: space_owner_insert_input!

    """on conflict condition"""
    on_conflict: space_owner_on_conflict
  ): space_owner

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user

  """
  insert data into the table: "user_status"
  """
  insert_user_status(
    """the rows to be inserted"""
    objects: [user_status_insert_input!]!

    """on conflict condition"""
    on_conflict: user_status_on_conflict
  ): user_status_mutation_response

  """
  insert a single row into the table: "user_status"
  """
  insert_user_status_one(
    """the row to be inserted"""
    object: user_status_insert_input!

    """on conflict condition"""
    on_conflict: user_status_on_conflict
  ): user_status

  """
  update data of the table: "box"
  """
  update_box(
    """sets the columns of the filtered rows to the given values"""
    _set: box_set_input

    """filter the rows which have to be updated"""
    where: box_bool_exp!
  ): box_mutation_response

  """
  update single row of the table: "box"
  """
  update_box_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: box_set_input
    pk_columns: box_pk_columns_input!
  ): box

  """
  update data of the table: "foodstuff"
  """
  update_foodstuff(
    """increments the numeric columns with given value of the filtered values"""
    _inc: foodstuff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: foodstuff_set_input

    """filter the rows which have to be updated"""
    where: foodstuff_bool_exp!
  ): foodstuff_mutation_response

  """
  update single row of the table: "foodstuff"
  """
  update_foodstuff_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: foodstuff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: foodstuff_set_input
    pk_columns: foodstuff_pk_columns_input!
  ): foodstuff

  """
  update data of the table: "mst_category"
  """
  update_mst_category(
    """sets the columns of the filtered rows to the given values"""
    _set: mst_category_set_input

    """filter the rows which have to be updated"""
    where: mst_category_bool_exp!
  ): mst_category_mutation_response

  """
  update single row of the table: "mst_category"
  """
  update_mst_category_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: mst_category_set_input
    pk_columns: mst_category_pk_columns_input!
  ): mst_category

  """
  update data of the table: "mst_foodstuff"
  """
  update_mst_foodstuff(
    """sets the columns of the filtered rows to the given values"""
    _set: mst_foodstuff_set_input

    """filter the rows which have to be updated"""
    where: mst_foodstuff_bool_exp!
  ): mst_foodstuff_mutation_response

  """
  update single row of the table: "mst_foodstuff"
  """
  update_mst_foodstuff_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: mst_foodstuff_set_input
    pk_columns: mst_foodstuff_pk_columns_input!
  ): mst_foodstuff

  """
  update data of the table: "mst_picture"
  """
  update_mst_picture(
    """sets the columns of the filtered rows to the given values"""
    _set: mst_picture_set_input

    """filter the rows which have to be updated"""
    where: mst_picture_bool_exp!
  ): mst_picture_mutation_response

  """
  update single row of the table: "mst_picture"
  """
  update_mst_picture_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: mst_picture_set_input
    pk_columns: mst_picture_pk_columns_input!
  ): mst_picture

  """
  update data of the table: "space"
  """
  update_space(
    """sets the columns of the filtered rows to the given values"""
    _set: space_set_input

    """filter the rows which have to be updated"""
    where: space_bool_exp!
  ): space_mutation_response

  """
  update single row of the table: "space"
  """
  update_space_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: space_set_input
    pk_columns: space_pk_columns_input!
  ): space

  """
  update data of the table: "space_owner"
  """
  update_space_owner(
    """sets the columns of the filtered rows to the given values"""
    _set: space_owner_set_input

    """filter the rows which have to be updated"""
    where: space_owner_bool_exp!
  ): space_owner_mutation_response

  """
  update single row of the table: "space_owner"
  """
  update_space_owner_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: space_owner_set_input
    pk_columns: space_owner_pk_columns_input!
  ): space_owner

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update data of the table: "user_status"
  """
  update_user_status(
    """sets the columns of the filtered rows to the given values"""
    _set: user_status_set_input

    """filter the rows which have to be updated"""
    where: user_status_bool_exp!
  ): user_status_mutation_response

  """
  update single row of the table: "user_status"
  """
  update_user_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_status_set_input
    pk_columns: user_status_pk_columns_input!
  ): user_status
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "box"
  """
  box(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): [box!]!

  """
  fetch aggregated fields from the table: "box"
  """
  box_aggregate(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): box_aggregate!

  """fetch data from the table: "box" using primary key columns"""
  box_by_pk(box_id: uuid!): box

  """
  fetch data from the table: "foodstuff"
  """
  foodstuff(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): [foodstuff!]!

  """
  fetch aggregated fields from the table: "foodstuff"
  """
  foodstuff_aggregate(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): foodstuff_aggregate!

  """fetch data from the table: "foodstuff" using primary key columns"""
  foodstuff_by_pk(foodstuff_id: uuid!): foodstuff

  """
  fetch data from the table: "mst_category"
  """
  mst_category(
    """distinct select on columns"""
    distinct_on: [mst_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_category_order_by!]

    """filter the rows returned"""
    where: mst_category_bool_exp
  ): [mst_category!]!

  """
  fetch aggregated fields from the table: "mst_category"
  """
  mst_category_aggregate(
    """distinct select on columns"""
    distinct_on: [mst_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_category_order_by!]

    """filter the rows returned"""
    where: mst_category_bool_exp
  ): mst_category_aggregate!

  """fetch data from the table: "mst_category" using primary key columns"""
  mst_category_by_pk(mst_category_id: uuid!): mst_category

  """
  fetch data from the table: "mst_foodstuff"
  """
  mst_foodstuff(
    """distinct select on columns"""
    distinct_on: [mst_foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_foodstuff_order_by!]

    """filter the rows returned"""
    where: mst_foodstuff_bool_exp
  ): [mst_foodstuff!]!

  """
  fetch aggregated fields from the table: "mst_foodstuff"
  """
  mst_foodstuff_aggregate(
    """distinct select on columns"""
    distinct_on: [mst_foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_foodstuff_order_by!]

    """filter the rows returned"""
    where: mst_foodstuff_bool_exp
  ): mst_foodstuff_aggregate!

  """fetch data from the table: "mst_foodstuff" using primary key columns"""
  mst_foodstuff_by_pk(mst_foodstuff_id: uuid!): mst_foodstuff

  """
  fetch data from the table: "mst_picture"
  """
  mst_picture(
    """distinct select on columns"""
    distinct_on: [mst_picture_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_picture_order_by!]

    """filter the rows returned"""
    where: mst_picture_bool_exp
  ): [mst_picture!]!

  """
  fetch aggregated fields from the table: "mst_picture"
  """
  mst_picture_aggregate(
    """distinct select on columns"""
    distinct_on: [mst_picture_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_picture_order_by!]

    """filter the rows returned"""
    where: mst_picture_bool_exp
  ): mst_picture_aggregate!

  """fetch data from the table: "mst_picture" using primary key columns"""
  mst_picture_by_pk(mst_picture_id: uuid!): mst_picture

  """
  fetch data from the table: "space"
  """
  space(
    """distinct select on columns"""
    distinct_on: [space_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_order_by!]

    """filter the rows returned"""
    where: space_bool_exp
  ): [space!]!

  """
  fetch aggregated fields from the table: "space"
  """
  space_aggregate(
    """distinct select on columns"""
    distinct_on: [space_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_order_by!]

    """filter the rows returned"""
    where: space_bool_exp
  ): space_aggregate!

  """fetch data from the table: "space" using primary key columns"""
  space_by_pk(space_id: uuid!): space

  """
  fetch data from the table: "space_owner"
  """
  space_owner(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): [space_owner!]!

  """
  fetch aggregated fields from the table: "space_owner"
  """
  space_owner_aggregate(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): space_owner_aggregate!

  """fetch data from the table: "space_owner" using primary key columns"""
  space_owner_by_pk(space_owner_id: uuid!): space_owner

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(user_id: String!): user

  """
  fetch data from the table: "user_status"
  """
  user_status(
    """distinct select on columns"""
    distinct_on: [user_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_status_order_by!]

    """filter the rows returned"""
    where: user_status_bool_exp
  ): [user_status!]!

  """
  fetch aggregated fields from the table: "user_status"
  """
  user_status_aggregate(
    """distinct select on columns"""
    distinct_on: [user_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_status_order_by!]

    """filter the rows returned"""
    where: user_status_bool_exp
  ): user_status_aggregate!

  """fetch data from the table: "user_status" using primary key columns"""
  user_status_by_pk(user_status_id: uuid!): user_status
}

"""
columns and relationships of "space"
"""
type space {
  """An array relationship"""
  boxes(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): [box!]!

  """An aggregate relationship"""
  boxes_aggregate(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): box_aggregate!
  created_at: timestamptz!
  created_by: String!
  space_id: uuid!
  space_name: String!

  """An array relationship"""
  space_owners(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): [space_owner!]!

  """An aggregate relationship"""
  space_owners_aggregate(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): space_owner_aggregate!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "space"
"""
type space_aggregate {
  aggregate: space_aggregate_fields
  nodes: [space!]!
}

"""
aggregate fields of "space"
"""
type space_aggregate_fields {
  count(columns: [space_select_column!], distinct: Boolean): Int!
  max: space_max_fields
  min: space_min_fields
}

"""
order by aggregate values of table "space"
"""
input space_aggregate_order_by {
  count: order_by
  max: space_max_order_by
  min: space_min_order_by
}

"""
input type for inserting array relation for remote table "space"
"""
input space_arr_rel_insert_input {
  data: [space_insert_input!]!

  """on conflict condition"""
  on_conflict: space_on_conflict
}

"""
Boolean expression to filter rows from the table "space". All fields are combined with a logical 'AND'.
"""
input space_bool_exp {
  _and: [space_bool_exp!]
  _not: space_bool_exp
  _or: [space_bool_exp!]
  boxes: box_bool_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  space_id: uuid_comparison_exp
  space_name: String_comparison_exp
  space_owners: space_owner_bool_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""
unique or primary key constraints on table "space"
"""
enum space_constraint {
  """unique or primary key constraint"""
  space_created_by_key

  """unique or primary key constraint"""
  spaces_pkey
}

"""
input type for inserting data into table "space"
"""
input space_insert_input {
  boxes: box_arr_rel_insert_input
  created_at: timestamptz
  created_by: String
  space_id: uuid
  space_name: String
  space_owners: space_owner_arr_rel_insert_input
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type space_max_fields {
  created_at: timestamptz
  created_by: String
  space_id: uuid
  space_name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "space"
"""
input space_max_order_by {
  created_at: order_by
  created_by: order_by
  space_id: order_by
  space_name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type space_min_fields {
  created_at: timestamptz
  created_by: String
  space_id: uuid
  space_name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "space"
"""
input space_min_order_by {
  created_at: order_by
  created_by: order_by
  space_id: order_by
  space_name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "space"
"""
type space_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [space!]!
}

"""
input type for inserting object relation for remote table "space"
"""
input space_obj_rel_insert_input {
  data: space_insert_input!

  """on conflict condition"""
  on_conflict: space_on_conflict
}

"""
on conflict condition type for table "space"
"""
input space_on_conflict {
  constraint: space_constraint!
  update_columns: [space_update_column!]! = []
  where: space_bool_exp
}

"""Ordering options when selecting data from "space"."""
input space_order_by {
  boxes_aggregate: box_aggregate_order_by
  created_at: order_by
  created_by: order_by
  space_id: order_by
  space_name: order_by
  space_owners_aggregate: space_owner_aggregate_order_by
  updated_at: order_by
  user: user_order_by
}

"""
columns and relationships of "space_owner"
"""
type space_owner {
  created_at: timestamptz!

  """An object relationship"""
  space: space!
  space_id: uuid!
  space_owner_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!
  user_id: String!
}

"""
aggregated selection of "space_owner"
"""
type space_owner_aggregate {
  aggregate: space_owner_aggregate_fields
  nodes: [space_owner!]!
}

"""
aggregate fields of "space_owner"
"""
type space_owner_aggregate_fields {
  count(columns: [space_owner_select_column!], distinct: Boolean): Int!
  max: space_owner_max_fields
  min: space_owner_min_fields
}

"""
order by aggregate values of table "space_owner"
"""
input space_owner_aggregate_order_by {
  count: order_by
  max: space_owner_max_order_by
  min: space_owner_min_order_by
}

"""
input type for inserting array relation for remote table "space_owner"
"""
input space_owner_arr_rel_insert_input {
  data: [space_owner_insert_input!]!

  """on conflict condition"""
  on_conflict: space_owner_on_conflict
}

"""
Boolean expression to filter rows from the table "space_owner". All fields are combined with a logical 'AND'.
"""
input space_owner_bool_exp {
  _and: [space_owner_bool_exp!]
  _not: space_owner_bool_exp
  _or: [space_owner_bool_exp!]
  created_at: timestamptz_comparison_exp
  space: space_bool_exp
  space_id: uuid_comparison_exp
  space_owner_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "space_owner"
"""
enum space_owner_constraint {
  """unique or primary key constraint"""
  space_owner_id_key

  """unique or primary key constraint"""
  space_owners_pkey
}

"""
input type for inserting data into table "space_owner"
"""
input space_owner_insert_input {
  created_at: timestamptz
  space: space_obj_rel_insert_input
  space_id: uuid
  space_owner_id: uuid
  updated_at: timestamptz
  user: user_obj_rel_insert_input
  user_id: String
}

"""aggregate max on columns"""
type space_owner_max_fields {
  created_at: timestamptz
  space_id: uuid
  space_owner_id: uuid
  updated_at: timestamptz
  user_id: String
}

"""
order by max() on columns of table "space_owner"
"""
input space_owner_max_order_by {
  created_at: order_by
  space_id: order_by
  space_owner_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type space_owner_min_fields {
  created_at: timestamptz
  space_id: uuid
  space_owner_id: uuid
  updated_at: timestamptz
  user_id: String
}

"""
order by min() on columns of table "space_owner"
"""
input space_owner_min_order_by {
  created_at: order_by
  space_id: order_by
  space_owner_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "space_owner"
"""
type space_owner_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [space_owner!]!
}

"""
on conflict condition type for table "space_owner"
"""
input space_owner_on_conflict {
  constraint: space_owner_constraint!
  update_columns: [space_owner_update_column!]! = []
  where: space_owner_bool_exp
}

"""Ordering options when selecting data from "space_owner"."""
input space_owner_order_by {
  created_at: order_by
  space: space_order_by
  space_id: order_by
  space_owner_id: order_by
  updated_at: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: space_owner"""
input space_owner_pk_columns_input {
  space_owner_id: uuid!
}

"""
select columns of table "space_owner"
"""
enum space_owner_select_column {
  """column name"""
  created_at

  """column name"""
  space_id

  """column name"""
  space_owner_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "space_owner"
"""
input space_owner_set_input {
  created_at: timestamptz
  space_id: uuid
  space_owner_id: uuid
  updated_at: timestamptz
  user_id: String
}

"""
update columns of table "space_owner"
"""
enum space_owner_update_column {
  """column name"""
  created_at

  """column name"""
  space_id

  """column name"""
  space_owner_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""primary key columns input for table: space"""
input space_pk_columns_input {
  space_id: uuid!
}

"""
select columns of table "space"
"""
enum space_select_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  space_id

  """column name"""
  space_name

  """column name"""
  updated_at
}

"""
input type for updating data in table "space"
"""
input space_set_input {
  created_at: timestamptz
  created_by: String
  space_id: uuid
  space_name: String
  updated_at: timestamptz
}

"""
update columns of table "space"
"""
enum space_update_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  space_id

  """column name"""
  space_name

  """column name"""
  updated_at
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "box"
  """
  box(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): [box!]!

  """
  fetch aggregated fields from the table: "box"
  """
  box_aggregate(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): box_aggregate!

  """fetch data from the table: "box" using primary key columns"""
  box_by_pk(box_id: uuid!): box

  """
  fetch data from the table: "foodstuff"
  """
  foodstuff(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): [foodstuff!]!

  """
  fetch aggregated fields from the table: "foodstuff"
  """
  foodstuff_aggregate(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): foodstuff_aggregate!

  """fetch data from the table: "foodstuff" using primary key columns"""
  foodstuff_by_pk(foodstuff_id: uuid!): foodstuff

  """
  fetch data from the table: "mst_category"
  """
  mst_category(
    """distinct select on columns"""
    distinct_on: [mst_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_category_order_by!]

    """filter the rows returned"""
    where: mst_category_bool_exp
  ): [mst_category!]!

  """
  fetch aggregated fields from the table: "mst_category"
  """
  mst_category_aggregate(
    """distinct select on columns"""
    distinct_on: [mst_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_category_order_by!]

    """filter the rows returned"""
    where: mst_category_bool_exp
  ): mst_category_aggregate!

  """fetch data from the table: "mst_category" using primary key columns"""
  mst_category_by_pk(mst_category_id: uuid!): mst_category

  """
  fetch data from the table: "mst_foodstuff"
  """
  mst_foodstuff(
    """distinct select on columns"""
    distinct_on: [mst_foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_foodstuff_order_by!]

    """filter the rows returned"""
    where: mst_foodstuff_bool_exp
  ): [mst_foodstuff!]!

  """
  fetch aggregated fields from the table: "mst_foodstuff"
  """
  mst_foodstuff_aggregate(
    """distinct select on columns"""
    distinct_on: [mst_foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_foodstuff_order_by!]

    """filter the rows returned"""
    where: mst_foodstuff_bool_exp
  ): mst_foodstuff_aggregate!

  """fetch data from the table: "mst_foodstuff" using primary key columns"""
  mst_foodstuff_by_pk(mst_foodstuff_id: uuid!): mst_foodstuff

  """
  fetch data from the table: "mst_picture"
  """
  mst_picture(
    """distinct select on columns"""
    distinct_on: [mst_picture_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_picture_order_by!]

    """filter the rows returned"""
    where: mst_picture_bool_exp
  ): [mst_picture!]!

  """
  fetch aggregated fields from the table: "mst_picture"
  """
  mst_picture_aggregate(
    """distinct select on columns"""
    distinct_on: [mst_picture_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mst_picture_order_by!]

    """filter the rows returned"""
    where: mst_picture_bool_exp
  ): mst_picture_aggregate!

  """fetch data from the table: "mst_picture" using primary key columns"""
  mst_picture_by_pk(mst_picture_id: uuid!): mst_picture

  """
  fetch data from the table: "space"
  """
  space(
    """distinct select on columns"""
    distinct_on: [space_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_order_by!]

    """filter the rows returned"""
    where: space_bool_exp
  ): [space!]!

  """
  fetch aggregated fields from the table: "space"
  """
  space_aggregate(
    """distinct select on columns"""
    distinct_on: [space_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_order_by!]

    """filter the rows returned"""
    where: space_bool_exp
  ): space_aggregate!

  """fetch data from the table: "space" using primary key columns"""
  space_by_pk(space_id: uuid!): space

  """
  fetch data from the table: "space_owner"
  """
  space_owner(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): [space_owner!]!

  """
  fetch aggregated fields from the table: "space_owner"
  """
  space_owner_aggregate(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): space_owner_aggregate!

  """fetch data from the table: "space_owner" using primary key columns"""
  space_owner_by_pk(space_owner_id: uuid!): space_owner

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(user_id: String!): user

  """
  fetch data from the table: "user_status"
  """
  user_status(
    """distinct select on columns"""
    distinct_on: [user_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_status_order_by!]

    """filter the rows returned"""
    where: user_status_bool_exp
  ): [user_status!]!

  """
  fetch aggregated fields from the table: "user_status"
  """
  user_status_aggregate(
    """distinct select on columns"""
    distinct_on: [user_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_status_order_by!]

    """filter the rows returned"""
    where: user_status_bool_exp
  ): user_status_aggregate!

  """fetch data from the table: "user_status" using primary key columns"""
  user_status_by_pk(user_status_id: uuid!): user_status
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user"
"""
type user {
  """An array relationship"""
  boxes(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): [box!]!

  """An aggregate relationship"""
  boxes_aggregate(
    """distinct select on columns"""
    distinct_on: [box_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [box_order_by!]

    """filter the rows returned"""
    where: box_bool_exp
  ): box_aggregate!
  created_at: timestamptz!
  display_name: String

  """An array relationship"""
  foodstuffs(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): [foodstuff!]!

  """An aggregate relationship"""
  foodstuffs_aggregate(
    """distinct select on columns"""
    distinct_on: [foodstuff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [foodstuff_order_by!]

    """filter the rows returned"""
    where: foodstuff_bool_exp
  ): foodstuff_aggregate!
  id: uuid!
  mail: String

  """An array relationship"""
  space_owners(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): [space_owner!]!

  """An aggregate relationship"""
  space_owners_aggregate(
    """distinct select on columns"""
    distinct_on: [space_owner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_owner_order_by!]

    """filter the rows returned"""
    where: space_owner_bool_exp
  ): space_owner_aggregate!

  """An array relationship"""
  spaces(
    """distinct select on columns"""
    distinct_on: [space_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_order_by!]

    """filter the rows returned"""
    where: space_bool_exp
  ): [space!]!

  """An aggregate relationship"""
  spaces_aggregate(
    """distinct select on columns"""
    distinct_on: [space_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [space_order_by!]

    """filter the rows returned"""
    where: space_bool_exp
  ): space_aggregate!
  updated_at: timestamptz!
  user_id: String!
  user_name: String!

  """An object relationship"""
  user_status: user_status!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  boxes: box_bool_exp
  created_at: timestamptz_comparison_exp
  display_name: String_comparison_exp
  foodstuffs: foodstuff_bool_exp
  id: uuid_comparison_exp
  mail: String_comparison_exp
  space_owners: space_owner_bool_exp
  spaces: space_bool_exp
  updated_at: timestamptz_comparison_exp
  user_id: String_comparison_exp
  user_name: String_comparison_exp
  user_status: user_status_bool_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  user_id_key

  """unique or primary key constraint"""
  user_pkey
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  boxes: box_arr_rel_insert_input
  created_at: timestamptz
  display_name: String
  foodstuffs: foodstuff_arr_rel_insert_input
  id: uuid
  mail: String
  space_owners: space_owner_arr_rel_insert_input
  spaces: space_arr_rel_insert_input
  updated_at: timestamptz
  user_id: String
  user_name: String
  user_status: user_status_obj_rel_insert_input
}

"""aggregate max on columns"""
type user_max_fields {
  created_at: timestamptz
  display_name: String
  id: uuid
  mail: String
  updated_at: timestamptz
  user_id: String
  user_name: String
}

"""aggregate min on columns"""
type user_min_fields {
  created_at: timestamptz
  display_name: String
  id: uuid
  mail: String
  updated_at: timestamptz
  user_id: String
  user_name: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """on conflict condition"""
  on_conflict: user_on_conflict
}

"""
on conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  boxes_aggregate: box_aggregate_order_by
  created_at: order_by
  display_name: order_by
  foodstuffs_aggregate: foodstuff_aggregate_order_by
  id: order_by
  mail: order_by
  space_owners_aggregate: space_owner_aggregate_order_by
  spaces_aggregate: space_aggregate_order_by
  updated_at: order_by
  user_id: order_by
  user_name: order_by
  user_status: user_status_order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  user_id: String!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  mail

  """column name"""
  updated_at

  """column name"""
  user_id

  """column name"""
  user_name
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  created_at: timestamptz
  display_name: String
  id: uuid
  mail: String
  updated_at: timestamptz
  user_id: String
  user_name: String
}

"""
columns and relationships of "user_status"
"""
type user_status {
  active: Boolean!

  """An object relationship"""
  user: user!
  user_id: String!
  user_status_id: uuid!
}

"""
aggregated selection of "user_status"
"""
type user_status_aggregate {
  aggregate: user_status_aggregate_fields
  nodes: [user_status!]!
}

"""
aggregate fields of "user_status"
"""
type user_status_aggregate_fields {
  count(columns: [user_status_select_column!], distinct: Boolean): Int!
  max: user_status_max_fields
  min: user_status_min_fields
}

"""
Boolean expression to filter rows from the table "user_status". All fields are combined with a logical 'AND'.
"""
input user_status_bool_exp {
  _and: [user_status_bool_exp!]
  _not: user_status_bool_exp
  _or: [user_status_bool_exp!]
  active: Boolean_comparison_exp
  user: user_bool_exp
  user_id: String_comparison_exp
  user_status_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_status"
"""
enum user_status_constraint {
  """unique or primary key constraint"""
  user_status_pkey

  """unique or primary key constraint"""
  user_status_status_id_key

  """unique or primary key constraint"""
  user_status_user_id_key
}

"""
input type for inserting data into table "user_status"
"""
input user_status_insert_input {
  active: Boolean
  user: user_obj_rel_insert_input
  user_id: String
  user_status_id: uuid
}

"""aggregate max on columns"""
type user_status_max_fields {
  user_id: String
  user_status_id: uuid
}

"""aggregate min on columns"""
type user_status_min_fields {
  user_id: String
  user_status_id: uuid
}

"""
response of any mutation on the table "user_status"
"""
type user_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_status!]!
}

"""
input type for inserting object relation for remote table "user_status"
"""
input user_status_obj_rel_insert_input {
  data: user_status_insert_input!

  """on conflict condition"""
  on_conflict: user_status_on_conflict
}

"""
on conflict condition type for table "user_status"
"""
input user_status_on_conflict {
  constraint: user_status_constraint!
  update_columns: [user_status_update_column!]! = []
  where: user_status_bool_exp
}

"""Ordering options when selecting data from "user_status"."""
input user_status_order_by {
  active: order_by
  user: user_order_by
  user_id: order_by
  user_status_id: order_by
}

"""primary key columns input for table: user_status"""
input user_status_pk_columns_input {
  user_status_id: uuid!
}

"""
select columns of table "user_status"
"""
enum user_status_select_column {
  """column name"""
  active

  """column name"""
  user_id

  """column name"""
  user_status_id
}

"""
input type for updating data in table "user_status"
"""
input user_status_set_input {
  active: Boolean
  user_id: String
  user_status_id: uuid
}

"""
update columns of table "user_status"
"""
enum user_status_update_column {
  """column name"""
  active

  """column name"""
  user_id

  """column name"""
  user_status_id
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  mail

  """column name"""
  updated_at

  """column name"""
  user_id

  """column name"""
  user_name
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

